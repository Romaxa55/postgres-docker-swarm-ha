version: '3.8'

services:
  # Postgres Master
  pg-1: &pg
    image: 'bitnami/postgresql-repmgr:latest'
    networks:
      - postgres-network
    volumes:
      - pg_data:/bitnami/postgresql
    env_file: .env_postgres
    deploy: &swarm-01
      placement:
        constraints:
          - node.hostname == swarm-01

  etcd1: &etcd
    image: quay.io/coreos/etcd:v3.5.8
    hostname: etcd1
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd1
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd1:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd1:2379
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
    deploy:
      <<: *swarm-01
    networks:
      - postgres-network

  # Postgres Node2
  pg-2:
    <<: *pg
    volumes:
      - pg_data:/bitnami/postgresql
    environment:
      - REPMGR_NODE_NAME=pg-2
      - REPMGR_NODE_NETWORK_NAME=pg-2
    deploy: &swarm-02
      placement:
        constraints:
          - node.hostname == swarm-02

  etcd2:
    <<: *etcd
    hostname: etcd2
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd2
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd2:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd2:2379
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
    deploy:
      <<: *swarm-02

  # Postgres Node3
  pg-3:
    <<: *pg
    volumes:
      - pg_data:/bitnami/postgresql
    environment:
      - REPMGR_NODE_NAME=pg-3
      - REPMGR_NODE_NETWORK_NAME=pg-3
    deploy: &swarm-03
      placement:
        constraints:
          - node.hostname == swarm-03

  etcd3:
    <<: *etcd
    hostname: etcd3
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_NAME=etcd3
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd3:2380
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd3:2379
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
      - ETCD_INITIAL_CLUSTER=etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
    deploy:
      <<: *swarm-03

  pgpool:
    image: docker.io/bitnami/pgpool
    env_file: .env_postgres
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres-network

  ghost:
    image: ghcr.io/romaxa55/ghost-cms-in-docker:master
    deploy:
      replicas: 6
    environment:
      url: https://swag.industries
    labels:
      traefik.enable: "true"
      traefik.http.routers.swag-ghost.rule: "Host(`swag.industries`)"
      traefik.http.routers.swag-ghost.entrypoints: "https"
      traefik.http.routers.swag-ghost.service: "ghost"
      traefik.http.routers.swag-ghost.tls.certresolver: "default"
      traefik.http.services.swag-ghost.loadbalancer.server.port: "2368"
    env_file: .env_postgres
    networks:
      - postgres-network
    volumes:
      - /mnt/glusterfs:/var/lib/ghost/content

  traefik:
    image: traefik:latest
    command:
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.email=info@roshamagin.site
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    environment:
      - CF_API_EMAIL=$CF_API_EMAIL
      - CF_API_KEY=$CF_API_KEY
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/glusterfs/letsencrypt:/letsencrypt
    networks:
      - postgres-network
   deploy:
      placement:
        constraints:
          - node.role == manager


networks:
  postgres-network:
    external: true

volumes:
  pg_data:
    driver: local